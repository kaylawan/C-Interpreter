"Fun" Language Compiler
Date: May 2023

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This C program serves as a robust compiler for the specialized "fun" language. It offers a wide array of features like support for arithmetic expressions, logic operators (following the same precedence and semantics of C), dynamic loops, and adept management of both local and global identifiers. Our implementation employs an abstract syntax tree to parse input from the “fun” program and output the compiled result as x86-64 assembly to stdout. Additionally, we've built an interpreter for the direct execution of "fun" program instructions, offering greater flexibility and a high-performance runtime environment.

Objectives
•Part 1: Create a simple interpreter that translates and reads "fun" language code, then returns the output to stdout.
•Part 2: Reads a "fun" program from stdin, producing the compiled x86-64 assembly to stdout.

About the Language
•While it may a stretch to label it as a "language", it has no formal definition and is described by the provided interpreter. Here's a brief overview:

•All values are represented as 64-bit unsigned binary numbers.
•The language supports two main statements:
•print <expression>: Outputs the value of the expression as a 64-bit unsigned figure.
•<identifier> = <expression>: Assigns the expression's value to the given identifier.
•Supported operators include +, -, *, /, %. They share the same precedence, associativity, and semantics with C.
•Use '(' and ')' to alter precedence.
•Identifiers should commence with an alphabetical character and comprise alphanumeric characters.

Important Files
*.c: C files; edit, add or remove as needed.
*.cxx: C++ files; your mission is to phase them out.
*.h: Header files; feel free to manipulate them.
